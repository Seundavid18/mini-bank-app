trigger:
- main

pool:
  vmImage: ubuntu-latest

parameters:
  - name: versioningScheme
    type: string
    default: "main-patch"
    values:
      - main-patch       # Increment patch version when merged to main
      - release-patch    # Increment patch version when merged to release branch
      - manual           # Manual major.minor.patch versioning

variables:
  MajorMinorVersion: "1.0"  # Manually set major.minor version
  PatchVersion: "0"         # Default patch version

steps:
# Checkout repository with full history
- checkout: self
  fetchDepth: 0

# Download and install GitVersion CLI
- script: |
    echo "Downloading GitVersion CLI..."
    wget https://github.com/GitTools/GitVersion/releases/download/6.1.0/gitversion-linux-x64-6.1.0.tar.gz -O gitversion.tar.gz
    mkdir gitversion
    tar -xzf gitversion.tar.gz -C gitversion
    export PATH="$PATH:$(pwd)/gitversion"
    echo "##vso[task.prependpath]$(pwd)/gitversion"
  displayName: "Install GitVersion CLI"

# Run GitVersion and capture output
- script: |
    echo "Running GitVersion..."
    ./gitversion/gitversion /output json /config gitversion.yml > gitversion_output.json
    echo "GitVersion output saved."
  displayName: "Run GitVersion"

# Extract version from GitVersion
- script: |
    echo "Extracting version from GitVersion output..."
    if [ -f gitversion_output.json ]; then
        VERSION=$(cat gitversion_output.json | jq -r '.FullSemVer' || echo "")
        if [ -z "$VERSION" ]; then
            echo "Failed to extract version. Invalid or missing FullSemVer."
            exit 1
        fi
        echo "Computed version: $VERSION"
        echo "##vso[task.setvariable variable=GIT_FULL_VERSION]$VERSION"
    else
        echo "gitversion_output.json not found."
        exit 1
    fi
  displayName: "Extract Version from GitVersion"

# Apply Version Logic
- script: |
    echo "Selected versioning scheme: ${{ parameters.versioningScheme }}"

    # Start with the manually set Major.Minor version
    majorMinor="${{ variables.MajorMinorVersion }}"
    echo "Base Major.Minor version: $majorMinor"

    # Extract patch version from GitVersion's FullSemVer
    gitVersion=$(GIT_FULL_VERSION)
    patch=$(echo "$gitVersion" | grep -oE '[0-9]+$')

    # Increment patch based on branch and versioning scheme
    if [ "${{ parameters.versioningScheme }}" == "main-patch" ] && [ "$BUILD_SOURCEBRANCHNAME" == "main" ]; then
      echo "Incrementing patch version for main branch."
      patch=$((patch + 1))
    elif [ "${{ parameters.versioningScheme }}" == "release-patch" ] && [[ "$BUILD_SOURCEBRANCHNAME" =~ ^release.* ]]; then
      echo "Incrementing patch version for release branch."
      patch=$((patch + 1))
    elif [ "${{ parameters.versioningScheme }}" == "manual" ]; then
      echo "Using manual major.minor.patch versioning. No auto-increment."
    else
      echo "No patch increment applied."
    fi

    # Combine major.minor and updated patch (No pre-release tag)
    finalVersion="${majorMinor}.${patch}"
    echo "Final computed version: $finalVersion"

    # Export version as pipeline variable
    echo "##vso[task.setvariable variable=FINAL_VERSION]$finalVersion"
  displayName: "Compute Version Based on Parameter"

# Update Pipeline Name with Build Number, Commit Message, and Computed Version
- script: |
    # Get the build number
    BUILD_NUMBER=$(Build.BuildId)

    # Get the commit message
    COMMIT_MESSAGE="${BUILD_SOURCEVERSIONMESSAGE}"

    # Get the final version
    FINAL_VERSION="${{ variables.FINAL_VERSION }}"

    # Construct the new pipeline name: Build Number . Commit Message . Final Version
    PIPELINE_NAME="${BUILD_NUMBER} . ${COMMIT_MESSAGE} . v${FINAL_VERSION}"

    echo "Setting pipeline name to: $PIPELINE_NAME"
    echo "##vso[build.updatebuildnumber]$PIPELINE_NAME"
  displayName: "Update Pipeline Name with Build Number, Commit Message, and Final Version"

# Use Computed Version
- script: |
    echo "Building artifacts with version: $(FINAL_VERSION)"
  displayName: "Use Computed Version"

# Rest of the steps remain unchanged...
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

- task: Npm@1
  displayName: 'Install NPM in Client'
  inputs:
    command: 'install'
    workingDir: 'client'

- task: Npm@1
  displayName: 'Install NPM in Server'
  inputs:
    command: 'install'
    workingDir: 'server'

- task: Npm@1
  displayName: 'Install NPM in Test'
  inputs:
    command: 'install'
    workingDir: 'tests'

- task: Npm@1
  displayName: 'NPM Run Build'
  inputs:
    command: 'custom'
    workingDir: 'client'
    customCommand: 'run build'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'release-$(FINAL_VERSION)'
    publishLocation: 'Container'

# Run Unit Tests
- task: Npm@1
  displayName: Unit tests
  inputs:
    command: 'custom'
    workingDir: 'tests'
    customCommand: 'run test'
  condition: succeededOrFailed()

# Publish Unit Tests
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-results.xml'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()

# Install NYC in tests
- task: Npm@1
  displayName: 'NPM install NYC in Test'
  inputs:
    command: 'custom'
    workingDir: 'tests'
    customCommand: 'install --save-dev nyc'

# Publish Coverage results
- task: PublishCodeCoverageResults@2
  displayName: 'Build code coverage report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
